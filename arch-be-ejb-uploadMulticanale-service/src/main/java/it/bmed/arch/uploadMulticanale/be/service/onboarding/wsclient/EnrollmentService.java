
package it.bmed.arch.uploadMulticanale.be.service.onboarding.wsclient;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6b21 
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "EnrollmentService", targetNamespace = "http://www.infocert.it/legalbus/cop/onboarding", wsdlLocation = "/wsdl/OnboardingService.wsdl")
public class EnrollmentService
    extends Service
{

    private final static URL ENROLLMENTSERVICE_WSDL_LOCATION;
    private final static WebServiceException ENROLLMENTSERVICE_EXCEPTION;
    private final static QName ENROLLMENTSERVICE_QNAME = new QName("http://www.infocert.it/legalbus/cop/onboarding", "EnrollmentService");

    static {
        ENROLLMENTSERVICE_WSDL_LOCATION = it.bmed.arch.uploadMulticanale.be.service.onboarding.wsclient.EnrollmentService.class.getResource("/wsdl/OnboardingService.wsdl");
        WebServiceException e = null;
        if (ENROLLMENTSERVICE_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find '/wsdl/OnboardingService.wsdl' wsdl. Place the resource correctly in the classpath.");
        }
        ENROLLMENTSERVICE_EXCEPTION = e;
    }

    public EnrollmentService() {
        super(__getWsdlLocation(), ENROLLMENTSERVICE_QNAME);
    }

    public EnrollmentService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return
     *     returns OnboardingService
     */
    @WebEndpoint(name = "OnboardingServicePort")
    public OnboardingService getOnboardingServicePort() {
        return super.getPort(new QName("http://www.infocert.it/legalbus/cop/onboarding", "OnboardingServicePort"), OnboardingService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OnboardingService
     */
    @WebEndpoint(name = "OnboardingServicePort")
    public OnboardingService getOnboardingServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.infocert.it/legalbus/cop/onboarding", "OnboardingServicePort"), OnboardingService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (ENROLLMENTSERVICE_EXCEPTION!= null) {
            throw ENROLLMENTSERVICE_EXCEPTION;
        }
        return ENROLLMENTSERVICE_WSDL_LOCATION;
    }

}
